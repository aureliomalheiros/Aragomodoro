name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    
env:
  GO_VERSION: '1.22'

jobs:
  # Verificação de formatação e linting
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Install ALSA and audio dependencies
        run: sudo apt-get update && sudo apt-get install -y libasound2-dev pkg-config

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Verify go.mod is tidy
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum

      - name: Check formatting with gofmt
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            echo "Please run 'go fmt ./...' to fix formatting"
            exit 1
          fi

      - name: Run comprehensive Go quality checks
        run: |
          echo "🔍 Running Go quality checks..."
          
          # Format check (already done above, but ensure consistency)
          echo "Checking formatting..."
          gofmt -l . | tee /tmp/fmt_issues
          if [ -s /tmp/fmt_issues ]; then
            echo "❌ Formatting issues found"
            exit 1
          fi
          
          # Go vet for static analysis
          echo "Running go vet..."
          go vet ./...
          
          # Build check with verbose output for dependency validation
          echo "Validating build and dependencies..."
          go build -v ./...
          
          # Check for inefficient assignments (basic check)
          echo "Checking for obvious code issues..."
          go build -gcflags="-m" ./... 2>&1 | grep -q "escapes to heap" || true
          
          echo "✅ All Go quality checks passed"

      - name: Run go vet
        run: go vet ./...

      - name: Basic security checks
        run: |
          echo "🔒 Running basic security checks..."
          
          # Check for hardcoded credentials or sensitive data
          echo "Checking for potential security issues..."
          
          # Look for common security anti-patterns
          if grep -r "password\|secret\|key\|token" --include="*.go" . | grep -v "_test.go" | grep -v "//"; then
            echo "⚠️  Found potential hardcoded credentials - please review"
          fi
          
          # Check for SQL injection patterns
          if grep -r "SELECT\|INSERT\|UPDATE\|DELETE" --include="*.go" . | grep "+"; then
            echo "⚠️  Found potential SQL injection patterns - please review"
          fi
          
          echo "✅ Basic security check completed"

  # Testes unitários e de integração
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        go-version: ['1.21', '1.22', '1.23']
    
    steps:
      - name: Install ALSA and audio dependencies
        run: sudo apt-get update && sudo apt-get install -y libasound2-dev pkg-config

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run unit tests with coverage
        run: |
          go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          fail_ci_if_error: false

      - name: Run benchmarks
        run: go test -bench=. -benchmem ./...

  # Build e validação do binário
  build:
    name: Build Validation
    runs-on: ${{ matrix.os }}
    needs: lint
    strategy:
      matrix:
        os: [ubuntu-latest]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install ALSA and audio dependencies
        run: sudo apt-get update && sudo apt-get install -y libasound2-dev pkg-config

      - name: Download dependencies
        run: go mod download

      - name: Build binary
        run: |
          go build -v -ldflags="-s -w" -o aragomodoro .

      - name: Test binary execution
        run: |
          ./aragomodoro --help

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: aragomodoro-linux
          path: aragomodoro

  # Análise de segurança básica
  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run govulncheck for vulnerability scanning
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./... || echo "Vulnerability check completed with warnings"

  # Teste de performance
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libasound2-dev pkg-config

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Run performance benchmarks
        run: |
          go test -bench=. -benchmem -run=^$ ./... > benchmark.txt
          cat benchmark.txt

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark.txt

